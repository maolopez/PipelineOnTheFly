AWSTemplateFormatVersion: "2010-09-09"

Description: Create Admin Group, VPC, Internet Gateway, 2 subnets, 2 Route Tables, 2 NACLs, 2 security groups

Parameters:

  pEnvironment:
    Description: Environment
    Type: String
    AllowedPattern: "^[a-zA-Z0-9-]+$"
  KeyName:
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instances"
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: "must be the name of an existing EC2 KeyPair."
  SSHLocation:
    Description: "The IP address range that can SSH to the EC2 instance."
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: "99.241.167.11/32"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid IP CIDR range of the form x.x.x.x/x."

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    ConstraintDescription: must be a valid EC2 Free Tier instance type.

Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    Public:
      CIDR: 10.0.0.0/24
    Private:
      CIDR: 10.0.1.0/24

  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64

  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0080e4c5bc078760e      

Resources:

  AdminIAMGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub '${pEnvironment}_Admin_${AWS::Region}_${AWS::AccountId}'
      ManagedPolicyArns:  
        - arn:aws:iam::aws:policy/AdministratorAccess
  
  PowerUserIAmRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role for Ansible server
      RoleName: !Sub '${pEnvironment}_PowerRole_${AWS::Region}_${AWS::AccountId}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /service-role/
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess

  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap
        - SubnetConfig
        - VPC
        - CIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
       - Key: name
         Value: myPipeline

  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: name
        Value: myPipeline

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: myVPC
      InternetGatewayId:
        Ref: myInternetGateway

  myPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !FindInMap
        - SubnetConfig
        - Public
        - CIDR
      Tags:
      - Key: name
        Value: myPipeline

  myPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !FindInMap
        - SubnetConfig
        - Private
        - CIDR
      Tags:
      - Key: name
        Value: myPipeline          

  myPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: myVPC
      Tags:
      - Key: name
        Value: myPipeline

  myPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
       RouteTableId:
         Ref: myPublicRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId:
         Ref: myInternetGateway

  myPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: myPublicSubnet
      RouteTableId:
        Ref: myPublicRouteTable         

  myPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: myVPC
      Tags:
      - Key: name
        Value: myPipeline
     
  myPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: myPrivateSubnet
      RouteTableId:
        Ref: myPrivateRouteTable

  myPublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: myVPC
      Tags:
      - Key: name
        Value: myPipeline
  
  myPublicSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref myPublicNetworkAcl
      SubnetId: !Ref myPublicSubnet

  myInPublicNetworkAclEntry80:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: myPublicNetworkAcl
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  myInPublicNetworkAclEntry443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: myPublicNetworkAcl
      RuleNumber: '101'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443      

  myInPublicNetworkAclEntry22:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: myPublicNetworkAcl
      RuleNumber: '102'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 22
        To: 22

  myInPublicNetworkAclEntryEphemeralPorts:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: myPublicNetworkAcl
      RuleNumber: '103'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  myoutPublicNetworkAclEntryEphemeralPorts:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: myPublicNetworkAcl
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535        

  myPrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: myVPC
      Tags:
      - Key: name
        Value: myPipeline               

  myPrivateSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref myPrivateNetworkAcl
      SubnetId: !Ref myPrivateSubnet

  myInPrivateNetworkAclEntry22:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: myPrivateNetworkAcl
      RuleNumber: '101'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !FindInMap
        - SubnetConfig
        - Private
        - CIDR
      PortRange:
        From: 22
        To: 22

  myInPrivateNetworkAclEntryEphemeralPorts:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: myPrivateNetworkAcl
      RuleNumber: '102'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !FindInMap
        - SubnetConfig
        - Private
        - CIDR
      PortRange:
        From: 1024
        To: 65535 

  myoutPrivateNetworkAclEntryEphemeralPorts:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: myPrivateNetworkAcl
      RuleNumber: '103'
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !FindInMap
        - SubnetConfig
        - Private
        - CIDR
      PortRange:
        From: 0
        To: 65535              

  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH/HTTP/HTTPS access
      GroupName: !Sub '${pEnvironment}_PublicInstance_${AWS::Region}_${AWS::AccountId}'
      VpcId:
        Ref: myVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp:
          Ref: SSHLocation
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !FindInMap
        - SubnetConfig
        - VPC
        - CIDR
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: name
        Value: myPipeline 

  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH/HTTP/HTTPS access
      GroupName: !Sub '${pEnvironment}_PrivateInstance_${AWS::Region}_${AWS::AccountId}'
      VpcId:
        Ref: myVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !FindInMap
        - SubnetConfig
        - VPC
        - CIDR
      Tags:
      - Key: name
        Value: myPipeline

  PublicEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      UserData:
        Fn::Base64:
          Fn::Join:
          - ""
          - - "#!/bin/bash\n"
            - "yum update -y aws-cfn-bootstrap"
            - "/opt/aws/bin/cfn-init"
            - " --stack "
            - Ref: AWS::StackName
            - " --resource PublicEC2Instance "
            - " --region "
            - Ref: AWS::Region
            - "\n"
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - AWSInstanceType2Arch
          - Ref: InstanceType
          - Arch
      NetworkInterfaces: 
      - AssociatePublicIpAddress: "true"
        DeviceIndex: "0"
        GroupSet: 
          - Ref: "PublicSecurityGroup"
        SubnetId: 
          Ref: "myPublicSubnet"

  PrivateEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      UserData:
        Fn::Base64:
          Fn::Join:
          - ""
          - - "#!/bin/bash\n"
            - "yum update -y aws-cfn-bootstrap"
            - "/opt/aws/bin/cfn-init"
            - " --stack "
            - "useradd -c ansible -d /home/ansible -s /bin/bash ansible"
            - "passwd -d ansible"
            - "usermod -aG wheel ansible"
            - "su - ansible"
            - "yum install -y epel-release"
            - "yum install -y ansible"
            - "yum install -y python36 python36-pip"
            - "yum install -y git"
            - "mkdir -p /opt/ansible/inventory"
            - "chmod -R 755 /opt/ansible"
            - "chown -R ansible:ansible /opt/ansible"
            - "git clone https://github.com/ansible/ansible"
            - Ref: AWS::StackName
            - " --resource AnsibleEC2Instance "
            - " --region "
            - Ref: AWS::Region
            - "\n"
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - AWSInstanceType2Arch
          - Ref: InstanceType
          - Arch
      NetworkInterfaces: 
      - AssociatePublicIpAddress: "false"
        DeviceIndex: "0"
        GroupSet: 
          - Ref: "PrivateSecurityGroup"
        SubnetId: 
          Ref: "myPrivateSubnet"                 
